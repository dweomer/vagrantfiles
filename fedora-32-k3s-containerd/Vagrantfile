# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.box = "fedora/32-cloud-base"
  config.vm.box_version = "32.20200422.0"

  config.vm.provider :virtualbox do |v|
    v.memory = 2048
    v.cpus = 2
  end
  config.vm.provider :libvirt do |v|
    v.memory = 2048
    v.cpus = 2
  end

  config.vm.provision "enable-hybrid-cgroups-then-reboot", type: "shell", run: "once" do |sh|
    sh.upload_path = "/tmp/vagrant-enable-hybrid-cgroups-then-reboot"
    sh.reboot = true
    sh.inline = <<~SHELL
        sudo grubby --update-kernel=ALL --args="systemd.unified_cgroup_hierarchy=0"
    SHELL
  end

  config.vm.provision "disable-swap", type: "shell", run: "once" do |sh|
    sh.upload_path = "/tmp/vagrant-disable-swap"
    sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail
        if [ -f /swapfile ]; then
            swapoff -a
            sed -e 's/.*swapfile.*//g' -i /etc/fstab
            rm -vf /swapfile
        fi
    SHELL
  end

  # Disabled by default. To run:
  #   vagrant up --provision-with=upgrade-packages
  # To upgrade only specific packages:
  #   UPGRADE_PACKAGES=selinux vagrant up --provision-with=upgrade-packages
  #
  config.vm.provision "upgrade-packages", type: "shell", run: "never" do |sh|
    sh.upload_path = "/tmp/vagrant-upgrade-packages"
    sh.env = {
        'UPGRADE_PACKAGES': ENV['UPGRADE_PACKAGES'],
    }
    sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail
        yum -y upgrade ${UPGRADE_PACKAGES}
    SHELL
  end

  # To re-run, installing CNI from RPM:
  #   INSTALL_PACKAGES="containernetworking-plugins" vagrant up --provision-with=install-packages
  #
  config.vm.provision "install-packages", type: "shell", run: "once" do |sh|
    sh.upload_path = "/tmp/vagrant-install-packages"
    sh.env = {
        'INSTALL_PACKAGES': ENV['INSTALL_PACKAGES'],
    }
    sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail
        yum -y install \
            containernetworking-plugins \
            container-selinux \
            curl \
            dnf-plugins-core \
            iptables \
            less \
            lsof \
            socat \
            ${INSTALL_PACKAGES}
    SHELL
  end

  # SELinux is Enforcing by default.
  # To set SELinux as Disabled on a VM that has already been provisioned:
  #   SELINUX=Disabled vagrant up --provision-with=selinux
  # To set SELinux as Permissive on a VM that has already been provsioned
  #   SELINUX=Permissive vagrant up --provision-with=selinux
  config.vm.provision "selinux", type: "shell", run: "once" do |sh|
    sh.upload_path = "/tmp/vagrant-selinux"
    sh.env = {
        'SELINUX': ENV['SELINUX'] || "Enforcing"
    }
    sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail

        if ! type -p getenforce setenforce &>/dev/null; then
          echo SELinux is Disabled
          exit 0
        fi

        case "${SELINUX}" in
          Disabled)
            if mountpoint -q /sys/fs/selinux; then
              setenforce 0
              umount -v /sys/fs/selinux
            fi
            ;;
          Enforcing)
            mountpoint -q /sys/fs/selinux || mount -o rw,relatime -t selinuxfs selinuxfs /sys/fs/selinux
            setenforce 1
            ;;
          Permissive)
            mountpoint -q /sys/fs/selinux || mount -o rw,relatime -t selinuxfs selinuxfs /sys/fs/selinux
            setenforce 0
            ;;
          *)
            echo "SELinux mode not supported: ${SELINUX}" >&2
            exit 1
            ;;
        esac

        echo SELinux is $(getenforce)
    SHELL
  end

  config.vm.provision "install-cni", type: "shell", run: "once" do |sh|
    sh.upload_path = "/tmp/vagrant-install-cni"
    sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail
        mkdir -p /etc/cni/net.d
        cat << EOF > /etc/cni/net.d/10-flannel.conflist
{
    "name":"cbr0",
    "cniVersion":"0.3.1",
    "plugins":[{
        "type":"flannel",
        "delegate":{
            "hairpinMode":true,
            "forceAddress":true,
            "isDefaultGateway":true
        }
    },{
        "type":"portmap",
        "capabilities":{
            "portMappings":true
       }
   }]
}
EOF
    SHELL
  end

  config.vm.provision "install-containerd", type: "shell", run: "once" do |sh|
    sh.upload_path = "/tmp/vagrant-install-containerd"
    sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail
        mkdir -p /etc/containerd
        cat << EOF > /etc/containerd/config.toml
[plugins.opt]
  path = "/var/lib/rancher/k3s/agent/containerd"
[plugins.cri]
  stream_server_address = "127.0.0.1"
  stream_server_port = "10010"
  enable_selinux = true
  sandbox_image = "docker.io/rancher/pause:3.1"
[plugins.cri.cni]
  bin_dir = "/usr/libexec/cni"
  conf_dir = "/etc/cni/net.d"
EOF
        dnf config-manager -y --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
        dnf -y --enablerepo=docker-ce-test install containerd.io
        curl -fsSL --output /usr/bin/containerd \
            'https://github.com/dweomer/containerd/releases/download/v1.4.1-dev.0%2Brelable-dev-shm/containerd'
        chmod +x /usr/bin/containerd
        restorecon -v /usr/bin/containerd
        systemctl enable --now containerd
    SHELL
  end

  config.vm.provision "install-suc", type: "shell", run: "never" do |sh|
    sh.upload_path = "/tmp/vagrant-install-suc"
    sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail
        while ! /usr/local/bin/kubectl get node &>/dev/null; do
            sleep 5
        done
        curl -fsSL https://raw.githubusercontent.com/rancher/system-upgrade-controller/master/manifests/system-upgrade-controller.yaml | /usr/local/bin/kubectl apply -f-
    SHELL
  end

  config.vm.provision "install-suc-plans", type: "shell", run: "never" do |sh|
    sh.upload_path = "/tmp/vagrant-install-suc-plans"
    sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail
        while ! /usr/local/bin/kubectl get node &>/dev/null; do
            sleep 5
        done
        cat << EOF > k3s-upgrade.yaml
---
apiVersion: upgrade.cattle.io/v1
kind: Plan
metadata:
  name: k3s-server
  namespace: system-upgrade
  labels:
    k3s-upgrade: server
spec:
  concurrency: 1
  version: v1.19.3+k3s1
  nodeSelector:
    matchExpressions:
      - {key: k3s-upgrade, operator: Exists}
      - {key: k3s-upgrade, operator: NotIn, values: ["disabled", "false"]}
      - {key: k3s.io/hostname, operator: Exists}
      - {key: k3os.io/mode, operator: DoesNotExist}
      - {key: node-role.kubernetes.io/master, operator: In, values: ["true"]}
  serviceAccountName: system-upgrade
  cordon: true
  upgrade:
    image: rancher/k3s-upgrade
---
apiVersion: upgrade.cattle.io/v1
kind: Plan
metadata:
  name: k3s-agent
  namespace: system-upgrade
  labels:
    k3s-upgrade: agent
spec:
  concurrency: 2
  version: v1.19.3+k3s1
  nodeSelector:
    matchExpressions:
      - {key: k3s-upgrade, operator: Exists}
      - {key: k3s-upgrade, operator: NotIn, values: ["disabled", "false"]}
      - {key: k3s.io/hostname, operator: Exists}
      - {key: k3os.io/mode, operator: DoesNotExist}
      - {key: node-role.kubernetes.io/master, operator: NotIn, values: ["true"]}
  serviceAccountName: system-upgrade
  prepare:
    image: rancher/k3s-upgrade
    args: ["prepare", "k3s-server"]
  drain:
    force: true
    skipWaitForDeleteTimeout: 30
  upgrade:
    image: rancher/k3s-upgrade
EOF
        while ! /usr/local/bin/kubectl apply -f k3s-upgrade.yaml; do
            sleep 5
        done
    SHELL
  end

  config.vm.provision "upgrade-cluster", type: "shell", run: "never" do |sh|
    sh.upload_path = "/tmp/vagrant-upgrade-cluster"
    sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail
        while ! /usr/local/bin/kubectl get node &>/dev/null; do
            sleep 5
        done
        /usr/local/bin/kubectl label node --all k3s-upgrade=true --overwrite=true
    SHELL
  end

  config.vm.provision "install-k3s-selinux", type: "shell", run: "never" do |sh|
    sh.upload_path = "/tmp/vagrant-install-k3s-selinux"
    sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail
        yum -y install https://github.com/k3s-io/k3s-selinux/releases/download/v0.3-rc1.testing.2/k3s-selinux-0.3.rc1-2.el8.noarch.rpm
    SHELL
  end

  config.vm.define "node-1" do |node|
      node.vm.hostname = "node-1"
      node.vm.provision "install-k3s", type: "shell", run: "once" do |sh|
        sh.upload_path = "/tmp/vagrant-install-k3s"
        sh.env = {
            'INSTALL_K3S_CHANNEL': ENV['INSTALL_K3S_CHANNEL'] || "stable",
            'INSTALL_K3S_SKIP_START': "true",
            'INSTALL_K3S_EXEC': "--container-runtime-endpoint=/run/containerd/containerd.sock",
            'K3S_SELINUX': "true",
            'K3S_TOKEN': "fedora/32",
            'K3S_KUBECONFIG_MODE': "0644",
        }
        sh.inline = <<~SHELL
            #!/usr/bin/env bash
            set -eux -o pipefail
            mkdir -vp /etc/systemd/system/k3s.service.d
            cat << EOF > /etc/systemd/system/k3s.service.d/restorecon.conf
[Service]
ExecStartPre=-/sbin/restorecon /usr/local/bin/k3s
EOF
            curl -fsSL https://get.k3s.io | sh
            systemctl enable --now k3s || true
        SHELL
      end
  end

  config.vm.define "node-2" do |node|
      node.vm.hostname = "node-2"
      node.vm.provision "install-k3s", type: "shell", run: "once" do |sh|
        sh.upload_path = "/tmp/vagrant-install-k3s"
        sh.env = {
            'INSTALL_K3S_CHANNEL': ENV['INSTALL_K3S_CHANNEL'] || "stable",
            'INSTALL_K3S_SKIP_START': "true",
            'INSTALL_K3S_EXEC': "--container-runtime-endpoint=/run/containerd/containerd.sock",
            'K3S_SELINUX': "true",
            'K3S_TOKEN': "fedora/32",
            'K3S_URL': "https://node-1:6443",
        }
        sh.inline = <<~SHELL
            #!/usr/bin/env bash
            set -eux -o pipefail
            mkdir -vp /etc/systemd/system/k3s-agent.service.d
            cat << EOF > /etc/systemd/system/k3s-agent.service.d/restorecon.conf
[Service]
ExecStartPre=-/sbin/restorecon /usr/local/bin/k3s
EOF
            curl -fsSL https://get.k3s.io | sh
            systemctl enable --now k3s-agent || true
        SHELL
      end
  end

end
