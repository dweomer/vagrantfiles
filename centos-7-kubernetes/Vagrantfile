# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.box = "centos/7"
  config.vm.box_version = "2004.01"

  config.vm.provider :virtualbox do |v|
    v.memory = 2048
    v.cpus = 2
  end
  config.vm.provider :libvirt do |v|
    v.memory = 2048
    v.cpus = 2
  end

  config.vm.provision "disable-swap", type: "shell", run: "once" do |sh|
    sh.upload_path = "/tmp/vagrant-disable-swap"
    sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail
        if [ -f /swapfile ]; then
            swapoff -a
            sed -e 's/.*swapfile.*//g' -i /etc/fstab
            rm -vf /swapfile
        fi
    SHELL
  end

  # Disabled by default. To run:
  #   vagrant up --provision-with=upgrade-packages
  # To upgrade only specific packages:
  #   UPGRADE_PACKAGES=selinux vagrant up --provision-with=upgrade-packages
  #
  config.vm.provision "upgrade-packages", type: "shell", run: "never" do |sh|
    sh.upload_path = "/tmp/vagrant-upgrade-packages"
    sh.env = {
        'UPGRADE_PACKAGES': ENV['UPGRADE_PACKAGES'],
    }
    sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail
        yum -y upgrade ${UPGRADE_PACKAGES}
    SHELL
  end

  # To re-run, installing CNI from RPM:
  #   INSTALL_PACKAGES="containernetworking-plugins" vagrant up --provision-with=install-packages
  #
  config.vm.provision "install-packages", type: "shell", run: "once" do |sh|
    sh.upload_path = "/tmp/vagrant-install-packages"
    sh.env = {
        'INSTALL_PACKAGES': ENV['INSTALL_PACKAGES'],
    }
    sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail
        yum -y install \
            container-selinux \
            curl \
            device-mapper-persistent-data \
            iptables \
            less \
            lsof \
            socat \
            lvm2 \
            runc \
            vim \
            yum-utils \
            ${INSTALL_PACKAGES}
    SHELL
  end

  # SELinux is Enforcing by default.
  # To set SELinux as Disabled on a VM that has already been provisioned:
  #   SELINUX=Disabled vagrant up --provision-with=selinux
  # To set SELinux as Permissive on a VM that has already been provsioned
  #   SELINUX=Permissive vagrant up --provision-with=selinux
  config.vm.provision "selinux", type: "shell", run: "once" do |sh|
    sh.upload_path = "/tmp/vagrant-selinux"
    sh.env = {
        'SELINUX': ENV['SELINUX'] || "Permissive"
    }
    sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail

        if ! type -p getenforce setenforce &>/dev/null; then
          echo SELinux is Disabled
          exit 0
        fi

        case "${SELINUX}" in
          Disabled)
            if mountpoint -q /sys/fs/selinux; then
              setenforce 0
              umount -v /sys/fs/selinux
            fi
            ;;
          Enforcing)
            mountpoint -q /sys/fs/selinux || mount -o rw,relatime -t selinuxfs selinuxfs /sys/fs/selinux
            setenforce 1
            ;;
          Permissive)
            mountpoint -q /sys/fs/selinux || mount -o rw,relatime -t selinuxfs selinuxfs /sys/fs/selinux
            setenforce 0
            ;;
          *)
            echo "SELinux mode not supported: ${SELINUX}" >&2
            exit 1
            ;;
        esac

        echo SELinux is $(getenforce)
    SHELL
  end

  config.vm.provision "install-containerd", type: "shell", run: "once" do |sh|
    sh.upload_path = "/tmp/vagrant-install-containerd"
    sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail
        mkdir -vp /usr/local/lib/systemd/system/containerd.service.d
        cat <<-EOF > /usr/local/lib/systemd/system/containerd.service.d/00-local.conf
[Service]
ExecStartPre=-/sbin/modprobe br_netfilter
ExecStartPre=-/sbin/sysctl -w net.bridge.bridge-nf-call-iptables=1
ExecStartPre=-/sbin/sysctl -w net.bridge.bridge-nf-call-ip6tables=1
ExecStartPre=-/sbin/sysctl -w net.ipv4.conf.all.forwarding=1
ExecStartPre=-/sbin/sysctl -w net.ipv6.conf.all.forwarding=1
EOF
        mkdir -vp /etc/containerd
        cat <<-EOF > /etc/containerd/config.toml
[plugins.cri]
  enable_selinux = true

[plugins.cri.containerd]
  snapshotter = "overlayfs"

[plugins.cri.containerd.runtimes.runc]
  runtime_type = "io.containerd.runc.v2"
EOF
        cat <<-EOF > /etc/crictl.yaml
runtime-endpoint: /run/containerd/containerd.sock
EOF
        curl -fsSL https://github.com/containerd/containerd/releases/download/v1.4.3/containerd-1.4.3-linux-amd64.tar.gz | tar -xvz -C /usr/local
        curl -fsSL --output /usr/local/lib/systemd/system/containerd.service \
            https://raw.githubusercontent.com/containerd/containerd/v1.4.3/containerd.service
        /usr/local/bin/containerd --version
    SHELL
  end

  config.vm.provision "install-docker", type: "shell", run: "never" do |sh|
    sh.upload_path = "/tmp/vagrant-install-docker"
    sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail
        yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
        yum -y install \
            containerd.io \
            docker-ce \
            docker-ce-cli
        mkdir -vp /etc/docker
        cat <<-EOF >/etc/docker/daemon.json
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "selinux-enabled": true,
  "storage-driver": "overlay2",
  "storage-opts": [
    "overlay2.override_kernel_check=true"
  ]
}
EOF
        mkdir -vp /usr/lib/systemd/system/docker.service.d
        cat <<-EOF > /usr/lib/systemd/system/docker.service.d/00-local.conf
[Service]
ExecStartPre=-/sbin/modprobe br_netfilter
ExecStartPre=-/sbin/sysctl -w net.bridge.bridge-nf-call-iptables=1
ExecStartPre=-/sbin/sysctl -w net.bridge.bridge-nf-call-ip6tables=1
ExecStartPre=-/sbin/sysctl -w net.ipv4.conf.all.forwarding=1
ExecStartPre=-/sbin/sysctl -w net.ipv6.conf.all.forwarding=1
EOF
    SHELL
  end

  config.vm.provision "install-kubernetes", type: "shell", run: "once" do |sh|
    sh.upload_path = "/tmp/vagrant-install-kubernetes"
    sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail
        mkdir -vp /var/lib/kubelet
        chcon -vR -t container_var_lib_t -u system_u /var/lib/kubelet
        cat <<-EOF > /var/lib/kubelet/config.yaml
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
cgroupDriver: cgroupfs
EOF
        cat <<-'EOF' > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-$basearch
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kubelet kubeadm kubectl
EOF
        yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
    SHELL
  end

  config.vm.provision "enable-containerd", type: "shell", run: "once" do |sh|
    sh.upload_path = "/tmp/vagrant-enable-containerd"
    sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail
        chcon -v -t container_runtime_exec_t $(type -ap runc)
        chcon -v -t container_runtime_exec_t /usr/local/bin/containerd*
        systemctl daemon-reload
        systemctl enable --now containerd || true
    SHELL
  end

  config.vm.provision "enable-docker", type: "shell", run: "never" do |sh|
    sh.upload_path = "/tmp/vagrant-enable-kubelet"
    sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail
        chcon -v -t container_runtime_exec_t $(type -ap dockerd)
        systemctl daemon-reload
        systemctl enable --now docker || true
    SHELL
  end

  config.vm.provision "enable-kubelet", type: "shell", run: "once" do |sh|
    sh.upload_path = "/tmp/vagrant-enable-kubelet"
    sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail
        chcon -v -t container_runtime_exec_t $(type -ap kubelet)
        systemctl daemon-reload
        systemctl enable --now kubelet || true
    SHELL
  end

  config.vm.provision "kubeadm-init", type: "shell", run: "once" do |sh|
    sh.upload_path = "/tmp/vagrant-kubeadm-init"
    sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail
        kubeadm init
        curl -fsSL https://docs.projectcalico.org/manifests/calico.yaml | kubectl --kubeconfig=/etc/kubernetes/admin.conf apply -f -
    SHELL
  end

end
