# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.box = "centos/8"
  config.vm.box_version = "2011.0"

  config.vm.provider :virtualbox do |v|
    v.memory = 2048
    v.cpus = 2
  end
  config.vm.provider :libvirt do |v|
    v.memory = 2048
    v.cpus = 2
  end

  config.vm.provision "disable-swap", type: "shell", run: "once" do |sh|
    sh.upload_path = "/tmp/vagrant-disable-swap"
    sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail
        if [ -f /swapfile ]; then
            swapoff -a
            sed -e 's/.*swapfile.*//g' -i /etc/fstab
            rm -vf /swapfile
        fi
    SHELL
  end

  # Disabled by default. To run:
  #   vagrant up --provision-with=upgrade-packages
  # To upgrade only specific packages:
  #   UPGRADE_PACKAGES=selinux vagrant up --provision-with=upgrade-packages
  #
  config.vm.provision "upgrade-packages", type: "shell", run: "never" do |sh|
    sh.upload_path = "/tmp/vagrant-upgrade-packages"
    sh.env = {
        'UPGRADE_PACKAGES': ENV['UPGRADE_PACKAGES'],
    }
    sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail
        yum -y upgrade ${UPGRADE_PACKAGES}
    SHELL
  end

  # To re-run, installing CNI from RPM:
  #   INSTALL_PACKAGES="containernetworking-plugins" vagrant up --provision-with=install-packages
  #
  config.vm.provision "install-packages", type: "shell", run: "once" do |sh|
    sh.upload_path = "/tmp/vagrant-install-packages"
    sh.env = {
        'INSTALL_PACKAGES': ENV['INSTALL_PACKAGES'],
    }
    sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail
        yum -y install \
            container-selinux \
            curl \
            iptables \
            less \
            lsof \
            socat \
            ${INSTALL_PACKAGES}
    SHELL
  end

  # SELinux is Enforcing by default.
  # To set SELinux as Disabled on a VM that has already been provisioned:
  #   SELINUX=Disabled vagrant up --provision-with=selinux
  # To set SELinux as Permissive on a VM that has already been provisioned
  #   SELINUX=Permissive vagrant up --provision-with=selinux
  config.vm.provision "selinux", type: "shell", run: "once" do |sh|
    sh.upload_path = "/tmp/vagrant-selinux"
    sh.env = {
        'SELINUX': ENV['SELINUX'] || "Enforcing"
    }
    sh.inline = <<~SHELL
        #!/usr/bin/env bash
        set -eux -o pipefail

        if ! type -p getenforce setenforce &>/dev/null; then
          echo SELinux is Disabled
          exit 0
        fi

        case "${SELINUX}" in
          Disabled)
            if mountpoint -q /sys/fs/selinux; then
              setenforce 0
              umount -v /sys/fs/selinux
            fi
            ;;
          Enforcing)
            mountpoint -q /sys/fs/selinux || mount -o rw,relatime -t selinuxfs selinuxfs /sys/fs/selinux
            setenforce 1
            ;;
          Permissive)
            mountpoint -q /sys/fs/selinux || mount -o rw,relatime -t selinuxfs selinuxfs /sys/fs/selinux
            setenforce 0
            ;;
          *)
            echo "SELinux mode not supported: ${SELINUX}" >&2
            exit 1
            ;;
        esac

        echo SELinux is $(getenforce)
    SHELL
  end

  config.vm.provision "install-rke2-common", type: "shell", run: "once" do |sh|
    sh.upload_path = "/tmp/vagrant-install-rke2-common"
    sh.inline = <<~SHELL
        #!/usr/bin/env bash
        # yum -y install https://github.com/rancher/rke2-selinux/releases/download/v0.5.testing.1/rke2-selinux-0.5-1.el7.noarch.rpm
        # yum -y install 'https://github.com/dweomer/rke2-selinux/releases/download/v0.5-dev.3%2Brke2.690/rke2-selinux-0.5-3.el7.noarch.rpm'
        cat <<-EOF > /etc/profile.d/rke2.sh
export KUBECONFIG=/etc/rancher/rke2/rke2.yaml PATH=/usr/local/bin:$PATH:/var/lib/rancher/rke2/bin
EOF
    SHELL
  end

  config.vm.define "node-1" do |node|
      node.vm.hostname = "node-1"
      node.vm.provider :virtualbox do |v|
        v.memory = 4096
        v.cpus = 4
      end
      node.vm.provider :libvirt do |v|
        v.memory = 4096
        v.cpus = 4
      end
      node.vm.provision "install-rke2", type: "shell", run: "once" do |sh|
        sh.upload_path = "/tmp/vagrant-install-rke2"
        sh.env = {
            'INSTALL_RKE2_TYPE': "server",
            'INSTALL_RKE2_CHANNEL': ENV['INSTALL_RKE2_CHANNEL'] || "stable",
            'RKE2_DEBUG': ENV['RKE2_DEBUG'],
            'RKE2_KUBECONFIG_MODE': ENV['RKE2_KUBECONFIG_MODE'] || "0664",
            'RKE2_RUNTIME_IMAGE': ENV['RKE2_RUNTIME_IMAGE'], # dweomer/rke2-runtime:v1.19.7-rke2-containerd-v1.4.3
            'RKE2_TOKEN': ENV['RKE2_TOKEN'] || "test",
        }
        sh.inline = <<~SHELL
            #!/usr/bin/env bash
            set -eux -o pipefail
            curl -fsSL https://get.rke2.io | sh -
            env | grep -E '^RKE2' > /usr/lib/systemd/system/rke2-${INSTALL_RKE2_TYPE}.env
            systemctl enable --now rke2-${INSTALL_RKE2_TYPE}
        SHELL
      end
      node.vm.provision "install-helm", type: "shell", run: "once" do |sh|
        sh.upload_path = "/tmp/vagrant-install-helm"
        sh.inline = <<~SHELL
            #!/usr/bin/env bash
            set -eux -o pipefail
            curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
            chmod 700 get_helm.sh
            ./get_helm.sh
        SHELL
      end
      node.vm.provision "wait-for-node", type: "shell", run: "once" do |sh|
        sh.upload_path = "/tmp/vagrant-wait-for-node"
        sh.env = {
            'KUBECONFIG': "/etc/rancher/rke2/rke2.yaml",
            'PATH': "/usr/local/bin:/usr/local/sbin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin:/var/lib/rancher/rke2/bin",
        }
        sh.inline = <<~SHELL
            #!/usr/bin/env bash
            echo 'GIVING RKE2 SOME TIME TO COME UP ...'
            set -eux -o pipefail
            sleep 30
            # wait for all of the static pods to show up as a rough indicator of readiness
            while ! kubectl -n kube-system wait --for condition=ready pod/etcd-$(hostname); do
                sleep 7
            done
            while ! kubectl -n kube-system wait --for condition=ready pod/kube-apiserver-$(hostname); do
                sleep 7
            done
            while ! kubectl -n kube-system wait --for condition=ready pod/kube-controller-manager-$(hostname); do
                sleep 7
            done
            while ! kubectl -n kube-system wait --for condition=ready pod/kube-scheduler-$(hostname); do
                sleep 7
            done
        SHELL
      end
      node.vm.provision "install-cert-manager", type: "shell", run: "once" do |sh|
        sh.upload_path = "/tmp/vagrant-install-cert-manager"
        sh.env = {
            'KUBECONFIG': "/etc/rancher/rke2/rke2.yaml",
            'PATH': "/usr/local/bin:/usr/local/sbin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin:/var/lib/rancher/rke2/bin",
        }
        sh.inline = <<~SHELL
            #!/usr/bin/env bash
            set -eux -o pipefail
            kubectl create namespace cert-manager
            helm repo add jetstack https://charts.jetstack.io
            helm repo update
            helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.1.0 --set installCRDs=true
            kubectl -n cert-manager rollout status deploy/cert-manager
        SHELL
      end
      node.vm.provision "install-rancher", type: "shell", run: "once" do |sh|
        sh.upload_path = "/tmp/vagrant-install-rancher"
        sh.env = {
            'KUBECONFIG': "/etc/rancher/rke2/rke2.yaml",
            'PATH': "/usr/local/bin:/usr/local/sbin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin:/var/lib/rancher/rke2/bin",
        }
        sh.inline = <<~SHELL
            #!/usr/bin/env bash
            set -eux -o pipefail
            kubectl create namespace cattle-system
            helm repo add rancher-latest https://releases.rancher.com/server-charts/latest
            helm repo update
            helm install rancher rancher-latest/rancher --namespace cattle-system --set hostname=rancher.local || true
            kubectl -n cattle-system rollout status deploy/rancher --timeout=3m || true
        SHELL
      end
  end

  config.vm.define "node-2" do |node|
      node.vm.hostname = "node-2"
      node.vm.provision "install-rke2", type: "shell", run: "once" do |sh|
        sh.upload_path = "/tmp/vagrant-install-rke2"
        sh.env = {
            'INSTALL_RKE2_TYPE': "agent",
            'INSTALL_RKE2_CHANNEL': ENV['INSTALL_RKE2_CHANNEL'] || "stable",
            'RKE2_DEBUG': ENV['RKE2_DEBUG'],
            'RKE2_RUNTIME_IMAGE': ENV['RKE2_RUNTIME_IMAGE'], # dweomer/rke2-runtime:v1.19.7-rke2-containerd-v1.4.3
            'RKE2_TOKEN': ENV['RKE2_TOKEN'] || "test",
            'RKE2_URL': "https://node-1:9345",
        }
        sh.inline = <<~SHELL
            #!/usr/bin/env bash
            set -eux -o pipefail
            curl -fsSL https://get.rke2.io | sh -
            env | grep -E '^RKE2' > /usr/lib/systemd/system/rke2-${INSTALL_RKE2_TYPE}.env
            systemctl enable --now rke2-${INSTALL_RKE2_TYPE}
        SHELL
      end
  end

  config.vm.define "node-3" do |node|
      node.vm.hostname = "node-3"
      node.vm.provision "install-rke2", type: "shell", run: "once" do |sh|
        sh.upload_path = "/tmp/vagrant-install-rke2"
        sh.env = {
            'INSTALL_RKE2_TYPE': "agent",
            'INSTALL_RKE2_CHANNEL': ENV['INSTALL_RKE2_CHANNEL'] || "stable",
            'RKE2_DEBUG': ENV['RKE2_DEBUG'],
            'RKE2_RUNTIME_IMAGE': ENV['RKE2_RUNTIME_IMAGE'], # dweomer/rke2-runtime:v1.19.7-rke2-containerd-v1.4.3
            'RKE2_TOKEN': ENV['RKE2_TOKEN'] || "test",
            'RKE2_URL': "https://node-1:9345",
        }
        sh.inline = <<~SHELL
            #!/usr/bin/env bash
            set -eux -o pipefail
            curl -fsSL https://get.rke2.io | sh -
            env | grep -E '^RKE2' > /usr/lib/systemd/system/rke2-${INSTALL_RKE2_TYPE}.env
            systemctl enable --now rke2-${INSTALL_RKE2_TYPE}
        SHELL
      end
  end

end
